// Code generated by go-bindata.
// sources:
// templates/404.html
// templates/footer.html
// templates/header.html
// templates/internal_error.html
// templates/main.html
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templates404Html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\xd1\xc1\x6a\xf3\x30\x0c\x07\xf0\xfb\xf7\x14\xc2\xf7\x7e\xa6\x3d\xa7\x79\x84\x9d\x76\x2f\x6a\x2c\xd7\x82\xc4\x0a\xb2\x52\x28\x21\xef\x3e\x32\xd2\xb2\x66\x66\xba\x18\xcc\x8f\xbf\x84\x34\xcf\x81\x22\x67\x02\x17\x65\xd2\x8b\xa4\xcb\xfa\xba\x65\xf9\x37\xcf\x46\xc3\xd8\xa3\x11\xb8\x44\x18\x48\x1d\xb8\x0f\x31\x88\x32\xe5\xb0\x0a\xd8\xaa\x29\xd4\x19\x4b\x86\xae\xc7\x52\xce\x2e\x91\x0a\x70\x39\x8c\xca\x03\xea\xc3\xb5\x2f\xf9\xad\x03\xdf\x7f\xca\xc3\x55\xc2\xde\xec\x5d\x27\xd9\x90\x33\x69\xcd\xa5\xe3\x93\x19\x5b\x4f\x15\xb2\xd6\x6b\xf2\xdf\x01\x3e\x1d\x6b\xb1\xa7\x67\x6c\x99\xae\x7f\x25\x7f\xea\x03\x0a\xa1\x76\x89\xf3\x0d\x24\x43\x83\x90\x94\xe2\xd9\x79\xd7\x5a\x22\x18\x90\x33\x8c\x78\xa3\xc6\x63\xfb\xbf\xd6\xff\x54\xe9\xef\x03\xdf\x77\x9b\x7b\xff\x6a\xfc\xb6\xf7\xf6\xed\x56\x51\xc4\x68\xbb\x20\xe5\xb0\x2c\x5f\x01\x00\x00\xff\xff\x45\x62\x47\x96\xe3\x01\x00\x00")

func templates404HtmlBytes() ([]byte, error) {
	return bindataRead(
		_templates404Html,
		"templates/404.html",
	)
}

func templates404Html() (*asset, error) {
	bytes, err := templates404HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/404.html", size: 483, mode: os.FileMode(436), modTime: time.Unix(1477621821, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesFooterHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\xcb\xcf\x2f\x49\x2d\x52\xaa\xad\xe5\x52\x50\x50\x50\xb0\xd1\x4f\xca\x4f\xa9\xb4\xe3\xb2\xd1\xcf\x28\xc9\xcd\xb1\xe3\xaa\xae\x4e\xcd\x4b\xa9\xad\x05\x04\x00\x00\xff\xff\xfc\x8e\x72\x53\x2f\x00\x00\x00")

func templatesFooterHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesFooterHtml,
		"templates/footer.html",
	)
}

func templatesFooterHtml() (*asset, error) {
	bytes, err := templatesFooterHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/footer.html", size: 47, mode: os.FileMode(436), modTime: time.Unix(1476625875, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHeaderHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x90\xcd\xb2\xd3\x30\x0c\x85\xf7\x7d\x0a\x61\xb6\x34\xe6\x67\xc7\x24\x79\x06\x06\x9e\x40\xb1\x95\x44\xf7\xda\x72\xc6\x56\x73\xe9\x84\xbc\x3b\xd3\xf4\x76\x1a\x3a\xc0\xb0\x60\x65\x1d\x9d\x6f\x64\xe9\x2c\x8b\xa7\x9e\x85\xc0\x8c\x84\x9e\xb2\x59\xd7\x43\xfd\xc6\x27\xa7\xe7\x89\x60\xd4\x18\xda\x43\x7d\x7d\x00\x00\xea\x0b\x75\x2d\x37\xa9\xac\x81\xda\x65\xa9\xd6\x15\x7e\xc0\x17\x74\xcf\x38\x10\x7c\xc3\x19\x45\x6b\x7b\x75\xef\x74\x24\x45\x10\x8c\xd4\x98\x99\xe9\x65\x4a\x59\x0d\xb8\x24\x4a\xa2\x8d\x79\x61\xaf\x63\xe3\x69\x66\x47\xc7\x4d\xbc\x03\x16\x56\xc6\x70\x2c\x0e\x03\x35\x1f\xcc\x6e\x58\x60\x79\x86\x4c\xa1\x31\x45\xcf\x81\xca\x48\xa4\x06\xc6\x4c\x7d\x63\x46\xd5\xa9\x7c\xb6\xd6\x79\x79\x2a\x95\x0b\xe9\xe4\xfb\x80\x99\x2a\x97\xa2\xc5\x27\xfc\x6e\x03\x77\xc5\x76\xa7\x10\xd1\xbe\xaf\x3e\x56\x9f\xac\x2b\xaf\xba\x8a\x2c\x95\x2b\xc5\xd8\xd7\x93\xed\xfd\xe6\xba\x4b\xfe\xbc\xdb\x41\x70\x06\x17\xb0\x94\xc6\x08\xce\xbb\xed\x36\xd7\xf3\xde\x3d\x06\xea\xf5\x01\xd9\x30\xdc\x43\xac\x14\x81\xcb\xb1\xcb\x28\xfe\x76\xce\x5b\xd3\x3e\x46\x8b\x0f\x7f\x59\xcf\x73\x7b\xf8\xb5\x57\x26\x94\xfd\x6c\x4d\xc3\x10\xe8\x77\x2b\x5c\xc8\xb6\xb6\xdb\xf3\xdf\xdc\x5b\xef\xaf\xa1\x64\x1e\x46\x85\x4b\x15\x49\x4e\xff\x14\xcf\x2e\x95\xaf\x34\xa5\xc2\x9a\x32\x53\xf9\x53\x26\x77\x29\x38\xb7\x87\x65\x21\xf1\xeb\xfa\x33\x00\x00\xff\xff\xed\xe5\xef\xc1\xf8\x02\x00\x00")

func templatesHeaderHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHeaderHtml,
		"templates/header.html",
	)
}

func templatesHeaderHtml() (*asset, error) {
	bytes, err := templatesHeaderHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/header.html", size: 760, mode: os.FileMode(436), modTime: time.Unix(1477791261, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesInternal_errorHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x94\x41\x8f\xd3\x3e\x10\xc5\xef\xff\x4f\x31\xff\xdc\x5b\x6b\xf7\xb8\xca\x06\x71\xe0\xc0\x01\x81\x00\x89\x23\x9a\xda\x93\x7a\x54\xc7\x13\x8d\x27\x45\xab\x68\xbf\x3b\x6a\x68\x51\x37\x4d\x2a\xe1\x5b\xec\x9f\xdf\xbc\x79\x8e\x3d\x8e\x81\x5a\xce\x04\x15\x67\x23\xcd\x98\x7e\x92\xaa\x68\xf5\xfa\xfa\xdf\x38\x1a\x75\x7d\x42\x23\xa8\x22\x61\x20\xad\xa0\xfa\x70\x59\x85\xf3\xa8\x0b\x79\x63\xc9\xe0\x13\x96\xf2\x5c\x45\x52\x01\x2e\x9b\x5e\xb9\x43\x7d\xa9\x9a\xbf\xe4\x44\x07\x3e\x5e\x93\x9b\x9d\x84\x39\x33\xe7\xbc\x64\x43\xce\xa4\x4b\x5c\x7c\xb8\x60\xc6\x96\x68\x01\x39\x8d\xcf\xd2\x97\xff\x6f\x37\xbb\xf8\xb0\x24\xf9\x78\x91\x2c\xc3\xee\x9e\xea\xfb\x0c\x53\x58\x10\xb1\x80\x78\x3f\xa8\x52\xd8\x2e\x95\x79\x5c\x28\xe3\x02\x1f\x67\xe1\xbc\x9d\xaa\xdd\x39\xda\x6b\x6a\x1e\xf7\xf9\xf3\x4e\xcc\x77\xe3\x7b\x73\x1c\x18\x38\xef\x57\x7a\xbd\x0d\xfa\x47\x44\x83\x12\x65\x48\x01\x3e\x42\x90\x77\x2b\x71\xde\xf6\xb9\xe4\x90\xb2\xad\x55\xee\x9b\xef\x91\x0b\x70\x81\x4e\x8a\x41\xe2\x03\xa5\x17\x40\xd8\x0d\x7b\xe0\x0c\x5f\xd0\x1f\x70\x4f\xf0\x0d\x8f\x98\x6d\x0b\x5f\xa9\x17\x35\xb0\x48\xc0\xa5\x0c\x04\x35\x42\x54\x6a\x9f\xab\x68\xd6\x97\x27\xe7\xf6\x6c\x71\xd8\x6d\xbd\x74\xae\xe3\x4c\x5e\xb1\x35\x52\xd7\xff\x11\xda\x94\x49\xc8\x4d\x9b\x4b\xd5\x44\x52\xaa\x1d\x36\xdb\xda\xf5\xcb\x0e\xc7\x91\x5b\xd8\x4e\x37\xe3\xea\x62\xcc\x7a\xf8\x84\x07\x82\x32\x28\x81\x09\x70\xf6\x69\x08\x34\x99\x6c\x25\x25\xf9\xc5\xf9\xd4\x4c\x2b\xda\xe1\xe9\x3c\x9f\x56\x8b\xd5\xbd\x52\x53\x7b\x09\xd4\x8c\xe3\xa5\x68\xed\xa6\x89\xda\x9d\x16\x57\x3c\x52\x0e\x0b\xee\xfe\xe9\x37\xbc\x7e\x11\x5a\x11\xa3\xf3\x3b\x31\x49\xff\x0e\x00\x00\xff\xff\x01\xe6\x0b\x88\x4b\x04\x00\x00")

func templatesInternal_errorHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesInternal_errorHtml,
		"templates/internal_error.html",
	)
}

func templatesInternal_errorHtml() (*asset, error) {
	bytes, err := templatesInternal_errorHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/internal_error.html", size: 1099, mode: os.FileMode(436), modTime: time.Unix(1477791212, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMainHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x92\xc1\x6e\xb3\x30\x10\x84\xef\xff\x53\xac\x7c\x4f\x50\x72\xe6\xe7\xd2\x73\xa5\xaa\xed\x0b\x6c\x60\x83\x57\x25\xb6\xeb\xdd\x50\x45\x96\xdf\xbd\x22\x81\x88\x50\xda\xbd\xed\xf8\xd3\x8c\x6c\x4f\x4a\x0d\x1d\xd9\x11\x98\x13\xb2\x33\x39\xff\x4b\x49\xe9\x14\x3a\x54\x02\x63\x09\x1b\x8a\x06\xcc\x33\xb2\x83\x80\x2d\x0d\x04\x8c\x53\x0a\xd5\xca\xde\x41\xdd\xa1\xc8\x7f\x63\x29\x7a\x60\xd9\x84\xc8\x27\x8c\x17\x53\xdd\xc9\x2b\xdd\x70\x3f\x27\x37\x07\xdf\x2c\x99\x25\x57\x7b\xa7\xc8\x8e\xe2\x1a\x67\x77\x13\xa6\xac\x1d\xad\x20\xc3\xbc\x60\xfd\x81\x2d\xc1\x1b\xf6\xe8\xf4\xa7\x4b\x61\x77\x6b\xde\xfb\xc9\x5b\xce\x87\xbf\xec\xcb\x50\xbd\x5b\x16\x60\x27\x8a\x5d\x07\x2c\x20\x14\x7b\x76\x2d\x94\xa2\xd1\xbb\xb6\x4a\x69\xfb\x4a\xc1\x0b\xab\x8f\x97\x27\x7f\x76\x9a\x73\x59\x8c\x87\x90\x12\x1f\x81\x3e\x61\xc9\xc0\x2e\xe7\x78\x97\x52\xa2\x4e\x68\xa6\x30\x49\x4a\xe4\x9a\x9c\xe1\x8b\xd5\xce\xc3\xc6\x1b\xff\x9e\x34\x07\x86\x98\x70\xdb\xa7\x8c\x71\x9d\xfc\xb7\x65\x11\x56\x5e\xa8\xb0\xfb\x35\xb5\xe1\x7e\xf1\xed\x8f\x52\x59\x8c\xa5\xa9\x1e\x8a\x76\xf4\x5e\x29\xde\xea\x77\x4d\xfd\x0e\x00\x00\xff\xff\xfc\xe6\x18\x66\x98\x02\x00\x00")

func templatesMainHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesMainHtml,
		"templates/main.html",
	)
}

func templatesMainHtml() (*asset, error) {
	bytes, err := templatesMainHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/main.html", size: 664, mode: os.FileMode(436), modTime: time.Unix(1477791267, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/404.html": templates404Html,
	"templates/footer.html": templatesFooterHtml,
	"templates/header.html": templatesHeaderHtml,
	"templates/internal_error.html": templatesInternal_errorHtml,
	"templates/main.html": templatesMainHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"404.html": &bintree{templates404Html, map[string]*bintree{}},
		"footer.html": &bintree{templatesFooterHtml, map[string]*bintree{}},
		"header.html": &bintree{templatesHeaderHtml, map[string]*bintree{}},
		"internal_error.html": &bintree{templatesInternal_errorHtml, map[string]*bintree{}},
		"main.html": &bintree{templatesMainHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

