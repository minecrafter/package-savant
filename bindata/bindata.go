// Code generated by go-bindata.
// sources:
// templates/404.html
// templates/footer.html
// templates/header.html
// templates/internal_error.html
// templates/main.html
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templates404Html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\xd1\xc1\x6a\xf3\x30\x0c\x07\xf0\xfb\xf7\x14\xc2\xf7\x7e\xa6\x3d\xa7\x79\x84\x9d\x76\x2f\x6a\x2c\xd7\x82\xc4\x0a\xb2\x52\x28\x21\xef\x3e\x32\xd2\xb2\x66\x66\xba\x18\xcc\x8f\xbf\x84\x34\xcf\x81\x22\x67\x02\x17\x65\xd2\x8b\xa4\xcb\xfa\xba\x65\xf9\x37\xcf\x46\xc3\xd8\xa3\x11\xb8\x44\x18\x48\x1d\xb8\x0f\x31\x88\x32\xe5\xb0\x0a\xd8\xaa\x29\xd4\x19\x4b\x86\xae\xc7\x52\xce\x2e\x91\x0a\x70\x39\x8c\xca\x03\xea\xc3\xb5\x2f\xf9\xad\x03\xdf\x7f\xca\xc3\x55\xc2\xde\xec\x5d\x27\xd9\x90\x33\x69\xcd\xa5\xe3\x93\x19\x5b\x4f\x15\xb2\xd6\x6b\xf2\xdf\x01\x3e\x1d\x6b\xb1\xa7\x67\x6c\x99\xae\x7f\x25\x7f\xea\x03\x0a\xa1\x76\x89\xf3\x0d\x24\x43\x83\x90\x94\xe2\xd9\x79\xd7\x5a\x22\x18\x90\x33\x8c\x78\xa3\xc6\x63\xfb\xbf\xd6\xff\x54\xe9\xef\x03\xdf\x77\x9b\x7b\xff\x6a\xfc\xb6\xf7\xf6\xed\x56\x51\xc4\x68\xbb\x20\xe5\xb0\x2c\x5f\x01\x00\x00\xff\xff\x45\x62\x47\x96\xe3\x01\x00\x00")

func templates404HtmlBytes() ([]byte, error) {
	return bindataRead(
		_templates404Html,
		"templates/404.html",
	)
}

func templates404Html() (*asset, error) {
	bytes, err := templates404HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/404.html", size: 483, mode: os.FileMode(436), modTime: time.Unix(1477621821, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesFooterHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\xcb\xcf\x2f\x49\x2d\x52\xaa\xad\xe5\x52\x50\x50\x50\xb0\xd1\x4f\xca\x4f\xa9\xb4\xe3\xb2\xd1\xcf\x28\xc9\xcd\xb1\xe3\xaa\xae\x4e\xcd\x4b\xa9\xad\x05\x04\x00\x00\xff\xff\xfc\x8e\x72\x53\x2f\x00\x00\x00")

func templatesFooterHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesFooterHtml,
		"templates/footer.html",
	)
}

func templatesFooterHtml() (*asset, error) {
	bytes, err := templatesFooterHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/footer.html", size: 47, mode: os.FileMode(436), modTime: time.Unix(1476625875, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHeaderHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x90\xdb\x12\x93\x40\x0c\x86\xef\x79\x8a\xb8\xde\x0a\xeb\xe1\xce\x01\x1e\x42\x9f\x20\xec\x06\x48\xdd\x03\xb3\x9b\x52\x3b\xc8\xbb\x3b\x85\x76\x8a\x1d\x75\xbc\xf0\x2a\xf9\x93\x6f\x72\xf8\x97\xc5\x52\xcf\x81\x40\x8d\x84\x96\x92\x5a\xd7\xa2\x7e\x63\xa3\x91\xeb\x44\x30\x8a\x77\x6d\x51\xef\x01\x00\xa0\xbe\x51\x7b\xba\x49\x61\x71\xd4\x2e\x4b\xb5\xae\xf0\x03\xbe\xe2\x40\xb5\xde\x6b\x4f\xc6\x93\x20\x04\xf4\xd4\xa8\x99\xe9\x32\xc5\x24\x0a\x4c\x0c\x42\x41\x1a\x75\x61\x2b\x63\x63\x69\x66\x43\xe5\x26\xde\x01\x07\x16\x46\x57\x66\x83\x8e\x9a\x0f\xea\x30\xcc\x71\xf8\x06\x89\x5c\xa3\xb2\x5c\x1d\xe5\x91\x48\x14\x8c\x89\xfa\x46\x8d\x22\x53\xfe\xac\xb5\xb1\xe1\x94\x2b\xe3\xe2\xd9\xf6\x0e\x13\x55\x26\x7a\x8d\x27\xfc\xae\x1d\x77\x59\x77\x67\xe7\x51\xbf\xaf\x3e\x56\x9f\xb4\xc9\x77\x5d\x79\x0e\x95\xc9\x59\xe9\xfb\xa3\xfa\xf9\x69\xdd\x45\x7b\x3d\xdc\x10\x70\x06\xe3\x30\xe7\x46\x05\x9c\x0f\xd7\x6d\x5d\xcb\xc7\x6e\xe9\xa8\x97\x17\x64\xc3\xf0\x08\xb1\x90\x07\xce\x65\x97\x30\xd8\xc7\x3b\x6f\x55\xbb\x1b\x8a\x2f\x1b\xb4\xe5\xb9\x2d\x7e\xad\xe5\x09\xc3\x71\xa2\xc4\x61\x70\xf4\xbb\xc5\x37\xb2\xad\xf5\x16\xfe\x5b\xf7\x51\xfb\xab\x15\x89\x87\x51\xe0\x96\x79\x0a\xe7\x7f\x32\xe5\xe0\xc5\x17\x9a\x62\x66\x89\x89\x29\xff\xc9\x93\xa7\x0c\x38\xb7\xc5\xb2\x50\xb0\xeb\xfa\x33\x00\x00\xff\xff\x08\xad\x7f\x3f\xe4\x02\x00\x00")

func templatesHeaderHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHeaderHtml,
		"templates/header.html",
	)
}

func templatesHeaderHtml() (*asset, error) {
	bytes, err := templatesHeaderHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/header.html", size: 740, mode: os.FileMode(436), modTime: time.Unix(1477621365, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesInternal_errorHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x94\x41\x6f\xd4\x30\x10\x85\xef\xfc\x8a\x21\xf7\xae\xd5\x1e\xab\x34\x88\x03\x07\x0e\x08\x04\x48\x1c\xd1\xac\x3d\x89\x47\x75\x3c\xd1\x78\xb2\xa8\x8a\xfa\xdf\xd1\x46\xbb\x68\x9b\x4d\x56\xc2\xb7\xd8\x9f\xe7\xbd\x79\x8e\x3d\x4d\x81\x5a\xce\x04\x15\x67\x23\xcd\x98\x7e\x93\xaa\x68\xf5\xfa\xfa\x6e\x9a\x8c\xfa\x21\xa1\x11\x54\x91\x30\x90\x56\x50\x7d\x3a\xaf\xc2\x69\xd4\x85\xbc\xb1\x64\xf0\x09\x4b\x79\xaa\x22\xa9\x00\x97\xbb\x41\xb9\x47\x7d\xa9\x9a\x7f\xe4\x4c\x07\x3e\x5c\x92\x77\x7b\x09\x4b\x66\xc9\x79\xc9\x86\x9c\x49\xd7\xb8\x78\x7f\xc6\x8c\x2d\xd1\x0a\x72\x1c\x5f\x65\x28\xef\xaf\x37\xbb\x78\xbf\x56\xf2\xe1\x5c\xb2\x8c\xfb\x5b\x55\x3f\x66\x98\xc3\x82\x88\x05\xc4\xfb\x51\x95\xc2\x6e\x4d\xe6\x61\x45\xc6\x05\x3e\x2c\xc2\x79\x3b\x55\xbb\x53\xb4\x97\xd4\x32\xee\xd3\xe7\x8d\x98\x6f\xc6\xf7\xe6\x38\x30\x70\xee\x36\x7a\xbd\x0e\xfa\x57\x44\x83\x12\x65\x4c\x01\x3e\x43\x90\x0f\x1b\x71\x5e\xf7\xb9\xe6\x90\xb2\x6d\x29\x0f\xcd\xcf\xc8\x05\xb8\x40\x2f\xc5\x20\xf1\x33\xa5\x17\x40\xd8\x8f\x1d\x70\x86\x6f\xe8\x9f\xb1\x23\xf8\x81\x07\xcc\xb6\x83\xef\x34\x88\x1a\x58\x24\xe0\x52\x46\x82\x1a\x21\x2a\xb5\x4f\x55\x34\x1b\xca\xa3\x73\x1d\x5b\x1c\xf7\x3b\x2f\xbd\xeb\x39\x93\x57\x6c\x8d\xd4\x15\xec\xc8\xcd\x5b\x4a\xd5\x44\x52\xaa\x1d\x36\xbb\xda\x0d\xeb\xbe\xa6\x89\x5b\xd8\xcd\xf7\xe1\xe2\x3a\x2c\x9c\x7f\xc1\x67\x82\x32\x2a\x81\x09\x70\xf6\x69\x0c\x34\x5b\x6b\x25\x25\xf9\xc3\xf9\xd8\x42\x2b\xda\xe3\xf1\x14\x1f\x37\xc5\xea\x41\xa9\xa9\xbd\x04\x6a\xa6\xe9\x2c\x5a\xbb\x79\xa2\x76\xc7\xc5\x0d\x8f\x94\xc3\x8a\xbb\xff\xfa\xf9\x2e\xdf\x81\x56\xc4\xe8\xf4\x3a\xcc\xa5\xff\x06\x00\x00\xff\xff\x31\x35\x3a\xce\x41\x04\x00\x00")

func templatesInternal_errorHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesInternal_errorHtml,
		"templates/internal_error.html",
	)
}

func templatesInternal_errorHtml() (*asset, error) {
	bytes, err := templatesInternal_errorHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/internal_error.html", size: 1089, mode: os.FileMode(436), modTime: time.Unix(1477623250, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMainHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x92\xc1\x6e\xf2\x30\x10\x84\xef\xff\x53\xac\x7c\x87\x08\xce\xf9\x73\xe9\xb9\x52\xd5\xf6\x05\x4c\xb2\xc4\xab\x1a\xdb\xf5\x2e\x54\x68\xe5\x77\xaf\x80\x04\x85\x34\xed\xde\x76\xfc\x79\x46\xb2\x47\xb5\xc3\x3d\x05\x04\x73\xb0\x14\x4c\x29\xff\x54\x05\x0f\xc9\x5b\x41\x30\x0e\x6d\x87\xd9\x80\x79\xb6\x14\x20\xd9\x1e\x2f\x04\x0c\x53\x33\xb6\x42\x31\x40\xeb\x2d\xf3\x7f\xe3\x30\x47\x20\x5e\xa5\x4c\x07\x9b\xcf\xa6\xb9\x93\x57\xba\xa3\xd3\x94\x5c\xed\x62\x37\x67\xe6\x5c\x1b\x83\x58\x0a\x98\x97\x38\xb7\x19\x31\x21\xf1\xb8\x80\x5c\xe6\xcd\xf6\xf8\xf3\x6e\xe5\x36\x4b\x8e\xdb\xd1\x91\x8f\xbb\xbf\x4c\xeb\xd4\xbc\x3b\x62\xa0\xc0\x62\xbd\x07\x62\x60\xcc\x27\x0a\x3d\xd4\x2c\x39\x86\xbe\x51\x5d\xbf\x62\x8a\x4c\x12\xf3\xf9\x29\x1e\x83\x94\x52\x57\xc3\x21\xa8\xd2\x1e\xf0\x13\xe6\x0c\x6c\x4a\xc9\x77\x49\x15\x3d\xe3\x44\x21\x64\x55\x0c\x5d\x29\xf0\x45\xe2\xa6\x61\x2f\xb6\xfd\xb0\x3d\xfe\x9e\x34\x05\x2e\x31\xe9\xb6\x8f\x19\xc3\x3a\xfa\xaf\xeb\x2a\x2d\xbc\x50\xe5\xb6\x4b\x6a\x47\xa7\xd9\x67\x3f\x4a\x75\x35\x54\xa5\x79\xa8\xd7\x3e\x46\xc1\x7c\x2b\xdd\x35\xf5\x3b\x00\x00\xff\xff\x41\xcb\x32\x02\x8e\x02\x00\x00")

func templatesMainHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesMainHtml,
		"templates/main.html",
	)
}

func templatesMainHtml() (*asset, error) {
	bytes, err := templatesMainHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/main.html", size: 654, mode: os.FileMode(436), modTime: time.Unix(1477621856, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/404.html": templates404Html,
	"templates/footer.html": templatesFooterHtml,
	"templates/header.html": templatesHeaderHtml,
	"templates/internal_error.html": templatesInternal_errorHtml,
	"templates/main.html": templatesMainHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"404.html": &bintree{templates404Html, map[string]*bintree{}},
		"footer.html": &bintree{templatesFooterHtml, map[string]*bintree{}},
		"header.html": &bintree{templatesHeaderHtml, map[string]*bintree{}},
		"internal_error.html": &bintree{templatesInternal_errorHtml, map[string]*bintree{}},
		"main.html": &bintree{templatesMainHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

